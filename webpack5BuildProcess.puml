@startuml
|webpack/bin/webpack.js|
start
:runCLI(cli);

|webpack-cli/lib/bootstrap.js|
:runCLI(args);

|webpack-cli/lib/webpack-cli.js|
:run(args, parseOptions);
:this.program.action(async (options, program) => {});
:loadCommandByName(commandName, allowToInstall);
:this.loadWebpack();
:this.runWebpack(options, isWatchCommand);
:this.createCompiler(options, callback);
:this.webpack(options, callback);

|webpack/lib/webpack.js|
:webpack(options, callback);
:const { compiler, watch, watchOptions } = create();
:compiler = createCompiler(webpackOptions);
:注册自己配置的插件的回调plugin.apply(compiler);
:new WebpackOptionsApply().process(options, compiler)根据我们的配置，会注册对应的内部插件;

|webpack/lib/WebpackOptionsApply.js|
:process(options, compiler) {
    new EntryOptionPlugin().apply(compiler)
    compiler.hooks.entryOption.call(options.context, options.entry)
};

|webpack/lib/EntryOptionPlugin.js|
:apply(compiler) {
    // 订阅compiler entryOption钩子，回调中执行EntryOptionPlugin.applyEntryOption(compiler, context, entry)
};

|webpack/lib/WebpackOptionsApply.js|
:compiler.hooks.entryOption.call(options.context, options.entry) 触发compiler entryOption钩子;
:注册其他内部插件;

|webpack/lib/EntryOptionPlugin.js|
:EntryOptionPlugin.applyEntryOption(compiler, context, entry);
:static applyEntryOption(compiler, context, entry);
:遍历entry,执行new EntryPlugin(context, entry, options).apply(compiler);

|webpack/lib/EntryPlugin.js|
:apply(compiler) {
    // 订阅compiler make钩子，回调中执行compilation.addEntry(context, dep, options, callback)
};

|webpack/lib/webpack.js|
:compiler.run(callback);

|Compiler.js|
:run(callback);
:run.run();
:const run = () => {
    this.compile(onCompiled)
};
:const onCompiled = (err, compilation) => {
    process.nextTick(() => {
       this.emitAssets(compilation, err => {
            this.hooks.done.callAsync(stats, err => {})
       }) 
    })
};
:compile(callback);
:开始创建entry的compilation对象;
:const compilation = this.newCompilation(params);
:newCompilation(params){const compilation = this.createCompilation(params)};
:new Compilation(this, params);

|Compilation.js|
:constructor(compiler, params);

|Compiler.js|
:this.hooks.make.callAsync(compilation, callback);

|webpack/lib/EntryPlugin.js|
:compilation.addEntry(context, dep, options, callback);

|Compilation.js|
:addEntry(context, entry, optionsOrName, callback) {
    this._addEntryItem(context, entry, "dependencies", options, callback)
};
:_addEntryItem(context, entry, target, options, callback) {
    this.addModuleTree({ context, dependency, contextInfo }, callback)
};
:addModuleTree({ context, dependency, contextInfo }, callback) {
    this.handleModuleCreation({factory, dependencies, originModule, contextInfo, context}, callback)
};
:handleModuleCreation({factory, dependencies, originModule, contextInfo, context}, callback) {
    this.factorizeModule({currentProfile,factory,dependencies,factoryResult: true,originModule,contextInfo,context}, callback)
};
:开始创建index.html的compilation对象;
:省略一些步骤...;
:handleModuleCreation({factory, dependencies, originModule, contextInfo, context}, callback) {
    this.factorizeModule({currentProfile,factory,dependencies,factoryResult: true,originModule,contextInfo,context}, callback)
};
:_factorizeModule({currentProfile, factory, dependencies, originModule, factoryResult, contextInfo, context}, callback) {
    factory.create(data, callback)
}

|lib/NormalModuleFactory.js|
:create(data, callback) {
    callback(err, factoryResult)
};

|Compilation.js|
:_factorizeModule(data, callback) {
    factory.create(data, (err, result) => {
        callback(null, factoryResult ? result : result.module)
    })
};
:this.factorizeModule({currentProfile,factory,dependencies,factoryResult: true,originModule,contextInfo,context}, (err, factoryResult) => {
    this.addModule(newModule, (err, module) => {})
});
:_addModule(module, callback){
    callback(null, module)
};
:this.addModule(newModule, (err, module) => {
    this._handleModuleBuildAndDependencies(
        originModule,
        module,
        recursive,
        callback
    )
});
:_handleModuleBuildAndDependencies(originModule, module, recursive, callback) {
    this.buildModule(module, err => {})
};
:_buildModule(module, callback) {
    module.needModule(context, (err, needBuild) => {
        module.build(this.options,this,this.resolverFactory.get("normal", module.resolveOptions),this.inputFileSystem,err => {})
    })
};

|NormalModule.js|
:needBuild(context, callback) {
    return callback(null, true)
};
:build(options, compilation, resolver, fs, callback) {
    return this._doBuild(options, compilation, resolver, fs, hooks, err => {
        let result
        const source = this._source.source()
        result = this.parser.parse(this._ast || source, {
            source,
            current: this,
            module: this,
            compilation: compilation,
            options: options
        })
    })
};
:_doBuild;
note right
_doBuild(options, compilation, resolver, fs, hooks, callback) {
    const processResult = (err, result) => {return callback()}
    runLoaders(options, (err, result) => {
        // loader解析模块为标准js模块
        processResult(err, result.result)
    })
}
end note

|loader-runner/lib/LoaderRunner.js|
:runLoaders(options, callback) {
    callback()
};

|NormalModule.js|
:this._doBuild;
note right
this._doBuild(options, compilation, resolver, fs, hooks, err => {
    let result
    const source = this._source.source()
    // parser.parse 对JS代码进行语法解析,解析成AST语法树
    result = this.parser.parse(this._ast || source, {
        source,
        current: this,
        module: this,
        compilation: compilation,
        options: options
    })
    const handleParseResult = e => {
        return callback()
    }
    ' // 处理ast importDeclation,并添加到module的dependencies中
    handleParseResult(result)
})
end note

|webpack/lib/javascript/JavascriptParser.js|
:parse(source, state) {
    return state
};

|NormalModule.js|
:this._doBuild(..., err => {
    callback()
});

|Compilation.js|
:module.build(this.options,this,this.resolverFactory.get("normal", module.resolveOptions),this.inputFileSystem,err => {callback()});
:this.buildModule(module, err => {
    this.processModuleDependencies(module, err => {
        callback(null, module)
    })
});
:_processModuleDependencies;
note right
_processModuleDependencies(module, callbak) {
    遍历module.dependencies,将dep转换为module
    for (const item of sortedDependencies) {
        inProgressTransitive++;
        this.handleModuleCreation(item, err => {})
    }
}
end note
:handleModuleCreation() {
    // 重复上面创建module的步骤
};
:所有module创建完毕;

|Compiler.js|
:compile(callback) {
    // make阶段执行完毕，接着调用compilation.seal
    compilation.seal(err => {
        return callback(null, compilation)
    })
};

|Compilation.js|
:seal(callback);
note right
seal(callback) {
    // 遍历entry
    for ( of this.entries) {
        // 每一个入口module生成一个入口chunk
        // 处理module.dependencies
        this.assignDepths(entryModules)
    }
}
end note
:assignDepths(modules) {
    // 深度遍历所有的module,生成compilation.moduleGraph(记录了模块的层级关系)
};
:seal(callback) {
    ' 处理ChunkGraph（记录了chunk的层级关系）
    ' 根据ChunkGraph生成chunks
    buildChunkGraph(this, chunkGraphInit)
    ' 触发钩子，插件中订阅了钩子，回调中对chunk和modules进行一些列优化
    this.hooks.optimize.call()
    this.hooks.optimizeChunkModules.callAsync(this.chunks, this.modules, err => {
        this.createChunkAssets(err => {cont()})
    })
};
:createChunkAssets(callback);
note right
createChunkAssets(callback) {
    ' 遍历chunks
    asyncLib.forEachLimit(
        this.chunks,
        15, 
        (chunk, callback) => {
            /** @type {Array<Record<string, any>>} */
            let manifest;
            ' chunk生成的manifest,可能有css,js或者img等
            manifest = this.getRenderManifest({
                chunk,
                ...
            })
            ' 遍历manifest
            asyncLib.forEach(
                manifest,
                (fileManifest, callback) => {
                    const ident = fileManifest.identifier;
                    const usedHash = fileManifest.hash;

                    const assetCacheItem = this._assetsCache.getItemCache(
                        ident,
                        usedHash
                    );

                    assetCacheItem.get((err, sourceFromCache) => {
                        let filenameTemplate;
                        let file;
                        let assetInfo;
                        ...
                        let source = sourceFromCache;
                        ' 将生成的源码存在compilation.assets
                        this.emitAsset(file, source, assetInfo);
                    })
                },
                callback
            )
        },
        callback
    )
}
end note
:emitAsset(file, source, assetInfo = {});
note right
emitAsset(file, source, assetInfo = {}) {
    if (this.assets[file]) {
        ' assets中有当前file,则更新
        this._setAssetInfo(file, newInfo, oldInfo);
        return;
    }
    ' 存放生成的文件到assets中
    this.assets[file] = source;
    this._setAssetInfo(file, assetInfo, undefined);
}
end note
:_setAssetInfo(file, newInfo, oldInfo = this.assetsInfo.get(file));
note right
_setAssetInfo(file, newInfo, oldInfo = this.assetsInfo.get(file)) {
    ' 生成file的assetInfo
    ...
}
end note

|Compiler.js|
:回到compile(callback);
note right
compile(callback) {
    compilation.seal(err => {
        this.hooks.afterCompile.callAsync(compilation, err => {
            ...
            return callback(null, compilation);
        })
    })
}
end note
:回到run(callback);
note right
run(callback) {
    const onCompiled = () => {
        ' 执行compile回调
    }
    const run = () => {
        ...
        this.compile(onCompiled);
    }
    run()
}
end note

:const onCompiled = (err, compilation) => {};
note right
const onCompiled = (err, compilation) => {
    ...
    process.nextTick(() => {
        this.emitAssets(compilation, err => {
            this.hooks.callAsync(stats, err => {
                ' 本次构建流程结束
            })
        })
    })
}
end note

:emitAssets(compilation, callback);
note right
emitAssets(compilation, callback) {
    const emitFiles = err => {})
    this.hooks.emit.callAsync(compilation, err => {
        if (err) return callback(err);
        outputPath = compilation.getPath(this.outputPath, {});
        mkdirp(this.outputFileSystem, outputPath, emitFiles);
    })
}
end note

|webpack/lib/util/fs.js|
note right
:const mkdirp = (fs, p, callback) {
    fs.mkdir(p, err => {
        if (err) {
            ...
            callback(err);
            return;
        }
        callback();
    })
}
end note

|Compiler.js|
:回到emitAssets;
note right
emitAssets(compilation, callback) {
    ' 回到emitFiles
    const emitFiles = err => {
        const assets = compilation.getAssets();
        compilation.assets = { ...compilation.assets };
        ' 遍历assets
        asyncLib.forEachLimit(
            assets,
            15,
            ({ name: file, source, info }, callback) => {
                callback()
            },
            err => {
                this.hooks.afterEmit.callAsync(compilation, err => {
                    ' 将assets写入文件系统
                    return callback();
                })
            }
        )
    }
}
end note

:回到const onCompiled = (err, compilation) => {};
note right
const onCompiled = (err, compilation) => {
    ...
    ' 回到this.emitAssets回调中
    this.emitAssets(compilation, err => {
        this.hooks.callAsync(stats, err => {
            ' 本次构建流程结束
            return finalCallback(null, stats);
        })
    })
}
end note

:回到const finalCallback = (err, stats) => {};
note right
const finalCallback = (err, stats) => {
    if (callback !== undefined) callback(err, stats);
    this.hooks.afterDone.call(stats);
};
end note

|lib/webpack.js|
:回到webpack(options, callback) => {};
note right
const webpack(options, callback) => {
    compiler.run((err, stats) => {
        ' 回到compiler.run的回调
        compiler.close(err2 => {
            callback(err || err2, stats);
        });
    });
}
end note

|webpack-cli/lib/webpack-cli.js|
:回到createCompiler(options, callback) {};
note right
async createCompiler(options, callback) {
    compiler = this.webpack(
        config.options,
        callback
            ? (error, stats) => {
                if (error && this.isValidationError(error)) {
                    this.logger.error(error.message);
                    process.exit(2);
                }

                callback(error, stats);
            }
        : callback,
    );
}
end note

@enduml